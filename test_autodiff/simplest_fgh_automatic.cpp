#line 2 "au_autodiff_generate_template.cpp"
#include <math.h>

#include "au_mex.h"

// Autogenerated by au_ccode
// FROM: [Anonymous expression]
// au_autodiff_template.cpp - outline code for au_autodiff*
// awf@microsoft.com, Dec 13

void mlx_function(mlx_inputs& ins, mlx_outputs& outs)
{
    mlx_array<mlx_double> in(ins[0]);
    mlx_array<mlx_double> data(ins[1]);
    mlx_scalar<mlx_double> do_jacobian_a(ins[2]);
    int do_jacobian = (int)do_jacobian_a[0];

    mlx_assert(in.cols == data.cols);
    mlx_assert(in.rows == 4);
    mlx_assert(data.rows == 21);
    mlx_assert(do_jacobian == 0 || do_jacobian == 1 || do_jacobian == 2);

    mwSize out_rows = 1;
    if (do_jacobian >= 1) out_rows += in.rows;
    if (do_jacobian >= 2) out_rows += in.rows * (in.rows+1)/2;
    mwSize out_cols = 1 * in.cols;

    mlx_make_array<mlx_double> out(out_rows, out_cols);

    double const* in_ptr = in.data;
    double const* data_ptr = data.data;
    double* out_ptr = out.data;

    const mwSize out_step = out_rows * 1;
    if (do_jacobian == 2) {
        for(mwSize c_in = 0; c_in < in.cols; ++c_in,
                in_ptr += in.rows,
                data_ptr += data.rows,
                out_ptr += out_step) {
              /* inner loop do_jac=2 */
    double x1 = in_ptr[0];
    double x2 = in_ptr[1];
    double x3 = in_ptr[2];
    double x4 = in_ptr[3];
    double data1 = data_ptr[0];
    double data2 = data_ptr[1];
    double data3 = data_ptr[2];
    double data4 = data_ptr[3];
    double data5 = data_ptr[4];
    double data6 = data_ptr[5];
    double data7 = data_ptr[6];
    double data8 = data_ptr[7];
    double data9 = data_ptr[8];
    double data10 = data_ptr[9];
    double data11 = data_ptr[10];
    double data12 = data_ptr[11];
    double data13 = data_ptr[12];
    double data14 = data_ptr[13];
    double data15 = data_ptr[14];
    double data16 = data_ptr[15];
    double data17 = data_ptr[16];
    double data18 = data_ptr[17];
    double data19 = data_ptr[18];
    double data20 = data_ptr[19];
    double data21 = data_ptr[20];
    double t2 = data1*x1;
    double t3 = data5*x2;
    double t4 = data9*x3;
    double t5 = data13*x4;
    double t6 = t2+t3+t4+t5;
    double t7 = data2*x1;
    double t8 = data6*x2;
    double t9 = data10*x3;
    double t10 = data14*x4;
    double t11 = t7+t8+t9+t10;
    double t12 = data3*x1;
    double t13 = data7*x2;
    double t14 = data11*x3;
    double t15 = data15*x4;
    double t16 = t12+t13+t14+t15;
    double t17 = data4*x1;
    double t18 = data8*x2;
    double t19 = data12*x3;
    double t20 = data16*x4;
    double t21 = t17+t18+t19+t20;
    double t22 = data1*data5;
    double t23 = data2*data6;
    double t24 = data3*data7;
    double t25 = data4*data8;
    double t26 = t22+t23+t24+t25;
    double t27 = data1*data9;
    double t28 = data2*data10;
    double t29 = data3*data11;
    double t30 = data4*data12;
    double t31 = t27+t28+t29+t30;
    double t32 = data5*data9;
    double t33 = data6*data10;
    double t34 = data7*data11;
    double t35 = data8*data12;
    double t36 = t32+t33+t34+t35;
    double t37 = data1*data13;
    double t38 = data2*data14;
    double t39 = data3*data15;
    double t40 = data4*data16;
    double t41 = t37+t38+t39+t40;
    double t42 = data5*data13;
    double t43 = data6*data14;
    double t44 = data7*data15;
    double t45 = data8*data16;
    double t46 = t42+t43+t44+t45;
    double t47 = data9*data13;
    double t48 = data10*data14;
    double t49 = data11*data15;
    double t50 = data12*data16;
    double t51 = t47+t48+t49+t50;
    double t52 = data13*data13;
    double t53 = data14*data14;
    double t54 = data15*data15;
    double t55 = data16*data16;
    double t56 = data9*data9;
    double t57 = data10*data10;
    double t58 = data11*data11;
    double t59 = data12*data12;
    double t60 = data5*data5;
    double t61 = data6*data6;
    double t62 = data7*data7;
    double t63 = data8*data8;
    double t64 = data1*data1;
    double t65 = data2*data2;
    double t66 = data3*data3;
    double t67 = data4*data4;
  out_ptr[0] = data17+x1*(t64+t65+t66+t67)+data1*t6+data2*t11+data3*t16+data4*t21+t26*x2+t31*x3+t41*x4;
  out_ptr[1] = data18+x2*(t60+t61+t62+t63)+data5*t6+data6*t11+data7*t16+data8*t21+t26*x1+t36*x3+t46*x4;
  out_ptr[2] = data19+x3*(t56+t57+t58+t59)+data9*t6+data10*t11+data11*t16+data12*t21+t31*x1+t36*x2+t51*x4;
  out_ptr[3] = data20+x4*(t52+t53+t54+t55)+data13*t6+data14*t11+data15*t16+data16*t21+t41*x1+t46*x2+t51*x3;
  out_ptr[4] = data1*data13*2.0+data2*data14*2.0+data3*data15*2.0+data4*data16*2.0;
  out_ptr[5] = data5*data13*2.0+data6*data14*2.0+data7*data15*2.0+data8*data16*2.0;
  out_ptr[6] = data9*data13*2.0+data10*data14*2.0+data11*data15*2.0+data12*data16*2.0;
  out_ptr[7] = t52*2.0+t53*2.0+t54*2.0+t55*2.0;
  out_ptr[8] = data1*data9*2.0+data2*data10*2.0+data3*data11*2.0+data4*data12*2.0;
  out_ptr[9] = data5*data9*2.0+data6*data10*2.0+data7*data11*2.0+data8*data12*2.0;
  out_ptr[10] = t56*2.0+t57*2.0+t58*2.0+t59*2.0;
  out_ptr[11] = data1*data5*2.0+data2*data6*2.0+data3*data7*2.0+data4*data8*2.0;
  out_ptr[12] = t60*2.0+t61*2.0+t62*2.0+t63*2.0;
  out_ptr[13] = t64*2.0+t65*2.0+t66*2.0+t67*2.0;

#line 40 "au_autodiff_generate_template.cpp"
        }
    } else if (do_jacobian == 1) {
        for(mwSize c_in = 0; c_in < in.cols; ++c_in,
                in_ptr += in.rows,
                data_ptr += data.rows,
                out_ptr += out_step) {
              /* inner loop do_jac=1 */
    double x1 = in_ptr[0];
    double x2 = in_ptr[1];
    double x3 = in_ptr[2];
    double x4 = in_ptr[3];
    double data1 = data_ptr[0];
    double data2 = data_ptr[1];
    double data3 = data_ptr[2];
    double data4 = data_ptr[3];
    double data5 = data_ptr[4];
    double data6 = data_ptr[5];
    double data7 = data_ptr[6];
    double data8 = data_ptr[7];
    double data9 = data_ptr[8];
    double data10 = data_ptr[9];
    double data11 = data_ptr[10];
    double data12 = data_ptr[11];
    double data13 = data_ptr[12];
    double data14 = data_ptr[13];
    double data15 = data_ptr[14];
    double data16 = data_ptr[15];
    double data17 = data_ptr[16];
    double data18 = data_ptr[17];
    double data19 = data_ptr[18];
    double data20 = data_ptr[19];
    double data21 = data_ptr[20];
    double t2 = data1*x1;
    double t3 = data5*x2;
    double t4 = data9*x3;
    double t5 = data13*x4;
    double t6 = t2+t3+t4+t5;
    double t7 = data2*x1;
    double t8 = data6*x2;
    double t9 = data10*x3;
    double t10 = data14*x4;
    double t11 = t7+t8+t9+t10;
    double t12 = data3*x1;
    double t13 = data7*x2;
    double t14 = data11*x3;
    double t15 = data15*x4;
    double t16 = t12+t13+t14+t15;
    double t17 = data4*x1;
    double t18 = data8*x2;
    double t19 = data12*x3;
    double t20 = data16*x4;
    double t21 = t17+t18+t19+t20;
    double t22 = data1*data5;
    double t23 = data2*data6;
    double t24 = data3*data7;
    double t25 = data4*data8;
    double t26 = t22+t23+t24+t25;
    double t27 = data1*data9;
    double t28 = data2*data10;
    double t29 = data3*data11;
    double t30 = data4*data12;
    double t31 = t27+t28+t29+t30;
    double t32 = data5*data9;
    double t33 = data6*data10;
    double t34 = data7*data11;
    double t35 = data8*data12;
    double t36 = t32+t33+t34+t35;
    double t37 = data1*data13;
    double t38 = data2*data14;
    double t39 = data3*data15;
    double t40 = data4*data16;
    double t41 = t37+t38+t39+t40;
    double t42 = data5*data13;
    double t43 = data6*data14;
    double t44 = data7*data15;
    double t45 = data8*data16;
    double t46 = t42+t43+t44+t45;
    double t47 = data9*data13;
    double t48 = data10*data14;
    double t49 = data11*data15;
    double t50 = data12*data16;
    double t51 = t47+t48+t49+t50;
  out_ptr[0] = data17+data1*t6+data2*t11+data3*t16+data4*t21+x1*(data1*data1+data2*data2+data3*data3+data4*data4)+t26*x2+t31*x3+t41*x4;
  out_ptr[1] = data18+data5*t6+data6*t11+data7*t16+data8*t21+x2*(data5*data5+data6*data6+data7*data7+data8*data8)+t26*x1+t36*x3+t46*x4;
  out_ptr[2] = data19+data9*t6+data10*t11+data11*t16+data12*t21+x3*(data9*data9+data10*data10+data11*data11+data12*data12)+t31*x1+t36*x2+t51*x4;
  out_ptr[3] = data20+data13*t6+data14*t11+data15*t16+data16*t21+x4*(data13*data13+data14*data14+data15*data15+data16*data16)+t41*x1+t46*x2+t51*x3;

#line 48 "au_autodiff_generate_template.cpp"
        }
    } else {
        for(mwSize c_in = 0; c_in < in.cols; ++c_in,
                in_ptr += in.rows,
                data_ptr += data.rows,
                out_ptr += out_step) {
              /* inner loop do_jac=0 */
    double x1 = in_ptr[0];
    double x2 = in_ptr[1];
    double x3 = in_ptr[2];
    double x4 = in_ptr[3];
    double data1 = data_ptr[0];
    double data2 = data_ptr[1];
    double data3 = data_ptr[2];
    double data4 = data_ptr[3];
    double data5 = data_ptr[4];
    double data6 = data_ptr[5];
    double data7 = data_ptr[6];
    double data8 = data_ptr[7];
    double data9 = data_ptr[8];
    double data10 = data_ptr[9];
    double data11 = data_ptr[10];
    double data12 = data_ptr[11];
    double data13 = data_ptr[12];
    double data14 = data_ptr[13];
    double data15 = data_ptr[14];
    double data16 = data_ptr[15];
    double data17 = data_ptr[16];
    double data18 = data_ptr[17];
    double data19 = data_ptr[18];
    double data20 = data_ptr[19];
    double data21 = data_ptr[20];
    double t2 = data1*x1;
    double t3 = data5*x2;
    double t4 = data9*x3;
    double t5 = data13*x4;
    double t6 = t2+t3+t4+t5;
    double t7 = data2*x1;
    double t8 = data6*x2;
    double t9 = data10*x3;
    double t10 = data14*x4;
    double t11 = t7+t8+t9+t10;
    double t12 = data3*x1;
    double t13 = data7*x2;
    double t14 = data11*x3;
    double t15 = data15*x4;
    double t16 = t12+t13+t14+t15;
    double t17 = data4*x1;
    double t18 = data8*x2;
    double t19 = data12*x3;
    double t20 = data16*x4;
    double t21 = t17+t18+t19+t20;
    out_ptr[0] = data21+x1*(data1*t6+data2*t11+data3*t16+data4*t21)+x2*(data5*t6+data6*t11+data7*t16+data8*t21)+x3*(data9*t6+data10*t11+data11*t16+data12*t21)+x4*(data13*t6+data14*t11+data15*t16+data16*t21)+data17*x1+data18*x2+data19*x3+data20*x4;

#line 56 "au_autodiff_generate_template.cpp"
        }
    }
    
    outs[0] = out;
}
